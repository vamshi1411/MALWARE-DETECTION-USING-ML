from flask import Flask, request, jsonify, render_template,abort,redirect,url_for

from werkzeug.utils import secure_filename
from werkzeug.datastructures import  FileStorage

import joblib
from sklearn.ensemble import RandomForestClassifier

import pickle

from featureextractor import extract_infos

app = Flask(__name__)

@app.route('/')
def home():
    return render_template('index.html')

@app.route('/uploader', methods = ['GET', 'POST'])
def upload_file():

    if request.method == 'POST':

        f = request.files['file']
        print("FileName:",f.filename)
        f.save(secure_filename(f.filename))
        ##########################################
        # Load classifier
        model = pickle.load(open("model.pkl","rb"))
        ##########################################
        data =extract_infos(f.filename)

        test = [data['ResourcesMeanEntropy'], data['SectionsNb'], data['Characteristics'], data['ResourcesMinEntropy'],
                data['SectionsMeanEntropy'], data['VersionInformationSize'], data['MajorSubsystemVersion'],
                data['ResourcesMaxEntropy'], data['Subsystem'], data['SizeOfStackReserve'],
                data['SizeOfOptionalHeader'], data['Machine'], data['SizeOfOptionalHeader'], data['DllCharacteristics']]

        res=model.predict([test])[0]
        print(res)

        return render_template('result.html', prediction = ['legitimate','malicious'][res])

if __name__ == '__main__':
  app.run(debug = True)